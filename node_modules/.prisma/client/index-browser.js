
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.1.0
 * Query Engine version: da41d2bb3406da22087b849f0e911199ba4fbf11
 */
Prisma.prismaVersion = {
  client: "4.1.0",
  engine: "da41d2bb3406da22087b849f0e911199ba4fbf11"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.USER_ACCOUNTScalarFieldEnum = makeEnum({
  US_ID: 'US_ID',
  US_ACCOUNT: 'US_ACCOUNT',
  US_PASSWORD: 'US_PASSWORD',
  TOKEN: 'TOKEN'
});

exports.Prisma.USER_INFOScalarFieldEnum = makeEnum({
  US_ID: 'US_ID',
  US_NAME: 'US_NAME',
  US_MAIL: 'US_MAIL',
  US_PHONE: 'US_PHONE',
  US_BIRTH: 'US_BIRTH',
  US_GENDER: 'US_GENDER',
  US_ADDRESS: 'US_ADDRESS'
});

exports.Prisma.PROJECT_ACCESSIBILITYScalarFieldEnum = makeEnum({
  MEM_POS: 'MEM_POS',
  DEL_PJ: 'DEL_PJ',
  EDIT_MEM_POS: 'EDIT_MEM_POS',
  EDIT_MEM: 'EDIT_MEM',
  EDIT_STATUS: 'EDIT_STATUS',
  CREATE_ANNOUNC_MNT: 'CREATE_ANNOUNC_MNT'
});

exports.Prisma.PROJECT_INFOScalarFieldEnum = makeEnum({
  PJ_ID: 'PJ_ID',
  PJ_NAME: 'PJ_NAME',
  PJ_CREATEDAY: 'PJ_CREATEDAY',
  PJ_DEADLINE: 'PJ_DEADLINE',
  PJ_STATUS: 'PJ_STATUS',
  PJ_ADMIN: 'PJ_ADMIN',
  PJ_OWNER: 'PJ_OWNER'
});

exports.Prisma.PROJECT_MEMBERScalarFieldEnum = makeEnum({
  PJ_ID: 'PJ_ID',
  MEM_ID: 'MEM_ID',
  MEM_POS: 'MEM_POS'
});

exports.Prisma.TASK_ACCESSIBILITYScalarFieldEnum = makeEnum({
  MEM_POS: 'MEM_POS',
  EDIT_MEM: 'EDIT_MEM',
  ADD_TASK: 'ADD_TASK',
  DEL_TASK: 'DEL_TASK',
  EDIT_NAME: 'EDIT_NAME',
  EDIT_DEADLINE: 'EDIT_DEADLINE',
  EDIT_STATUS: 'EDIT_STATUS',
  EDIT_DESCRIPTION: 'EDIT_DESCRIPTION'
});

exports.Prisma.TASK_INFOScalarFieldEnum = makeEnum({
  PJ_ID: 'PJ_ID',
  TASK_ID: 'TASK_ID',
  TASK_STATUS: 'TASK_STATUS',
  TASK_NAME: 'TASK_NAME',
  TASK_DESCRIPTON: 'TASK_DESCRIPTON',
  TASK_CREATEDAY: 'TASK_CREATEDAY',
  TASK_DEADLINE: 'TASK_DEADLINE',
  TASK_CREATOR: 'TASK_CREATOR'
});

exports.Prisma.TASK_RESPONDSIPLEScalarFieldEnum = makeEnum({
  PJ_ID: 'PJ_ID',
  TASK_ID: 'TASK_ID',
  MEM_ID: 'MEM_ID'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});


exports.Prisma.ModelName = makeEnum({
  USER_ACCOUNT: 'USER_ACCOUNT',
  USER_INFO: 'USER_INFO',
  PROJECT_ACCESSIBILITY: 'PROJECT_ACCESSIBILITY',
  PROJECT_INFO: 'PROJECT_INFO',
  PROJECT_MEMBER: 'PROJECT_MEMBER',
  TASK_ACCESSIBILITY: 'TASK_ACCESSIBILITY',
  TASK_INFO: 'TASK_INFO',
  TASK_RESPONDSIPLE: 'TASK_RESPONDSIPLE'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
